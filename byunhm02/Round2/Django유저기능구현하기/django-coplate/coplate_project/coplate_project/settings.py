"""
Django settings for coplate_project project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'vorhyw*g$t5z&vjgn4fcuxbymaj$_!+@46jl!o+10tzw)e3pcy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    #템플릿 오버라이딩을 하려면 꼭 coplate를 이 allauth 보다 위쪽에 써줘야 함(그래야 allauth의 signup.html이 아니라 coplate의 signup.html사용가능)
    #account의 signup.html을 오버라이딩함. (allauth 와 이름 같아야함)
    'coplate',
    'widget_tweaks', #input태그를 수정하기 위해 만들어진 패키지
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
]

SITE_ID=1

#request는 위에서부터 아래로 통과,response는 아래서 위로 통과
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',#request에 user라는 속성 더해줌
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'coplate.middleware.ProfileSetupMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    
]

ROOT_URLCONF = 'coplate_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'coplate_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME":"coplate.validators.CustomPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'ko'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/' # 정적파일의 url주소가 domain+"/static"+각각의 폴더안의 파일경로 가 됨.
MEDIA_ROOT=os.path.join(BASE_DIR,"media")
MEDIA_URL="/uploads/"

#Auth Settings
AUTH_USER_MODEL="coplate.User"

AUTHENTICATION_BACKENDS = [
    
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
    
]





#리디렉션 설정
ACCOUNT_SIGNUP_REDIRECT_URL="profile-set"
LOGIN_REDIRECT_URL="index"
LOGIN_URL="account_login"
ACCOUNT_LOGOUT_ON_GET=True #바로 로그아웃 되도록 설정
ACCOUNT_AUTHENTICATION_METHOD="email"#username이 아니라 email로 로그인 하도록 설정 
ACCOUNT_EMAIL_REQUIRED=True
ACCOUNT_USERNAME_REQUIRED=False
#ACCOUNT_SIGNUP_FORM_CLASS="coplate.forms.SignupForm"

ACCOUNT_SESSION_REMEMBER=True #브라우저 닫아도 로그인 유지
#SESSION_COOKIE_AGE=3600 #세션쿠키 유지 시간(초단위) ,기본은 2주
ACCOUNT_PASSWORD_INPUT_RENDER_VALUE=True #폼에 오류나도 입력했던 비밀번호를 폼에 그대로 채워 넣어줌

#mandatory:이메일 인증을 완료 할 때까지 로그인 할 수 없게 됨.
#optional: 회원가입 시 인증을 요청하는 이메일이 발송 되지만 이메일 인증을 하지 않아도 로그인을 할 수 있게 됨(디폴트)
#none:이메일 인증 필요 없고 인증 메일 발송되지 않음 
#ACCOUNT_EMAIL_VARIFICATION="optional"

ACCOUNT_CONFIRM_EMAIL_ON_GET=True
#인증 완료 페이지로 리디렉션
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL="account_email_confirmation_done"
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL="account_email_confirmation_done"
ACCOUNT_EMAIL_SUBJECT_PREFIX="" #앞에 붙는 도메인 제거하는 세팅

#email settings
EMAIL_BACKEND="django.core.mail.backends.console.EmailBackend"
